export interface LetterAnalysis {
  message: string;
  type: 'success' | 'error' | 'info' | 'warning';
}

export interface GrammarError {
  position: {
    start: number;
    end: number;
  };
  original: string;
  correction: string;
  type: 'orthographe' | 'grammaire' | 'conjugaison' | 'accord' | 'ponctuation' | 'style' | 'professionnel';
  explanation: string;
  severity?: 'critique' | 'majeure' | 'mineure';
}

export interface GrammarCheckResult {
  text: string;
  errors: GrammarError[];
}

export interface DocumentAnalysis {
  hasFormulePolitesse: boolean;
  tone: 'formal' | 'informal' | 'professional';
  language: 'french' | 'english';
  structure: {
    paragraphCount: number;
    hasIntroduction: boolean;
    hasConclusion: boolean;
  };
  existingKeywords: string[];
}

// Fonction d'analyse grammaticale PURE (sans modification du texte)
export const analyzeGrammarOnly = async (
  content: string,
  apiKey: string
): Promise<string | null> => {
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Tu es un outil d\'analyse grammaticale PURE. TA SEULE MISSION est d\'identifier les erreurs SANS RIEN MODIFIER DU TEXTE. Interdiction formelle de cr√©er, inventer ou modifier le moindre mot. R√©ponds UNIQUEMENT avec le format JSON demand√©.'
          },
          {
            role: 'user',
            content: content
          }
        ],
        temperature: 0.0, // Aucune cr√©ativit√© - analyse pure
        max_tokens: 2000
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`Erreur API OpenAI: ${errorData.error?.message || 'Erreur inconnue'}`);
    }

    const data = await response.json();
    return data.choices[0].message.content.trim();

  } catch (error) {
    console.error('Erreur lors de l\'analyse grammaticale:', error);
    throw error;
  }
};

// Fonction d'analyse du ton et de l'√©quilibre
export const analyzeToneAndBalance = async (
  content: string,
  editCVField: (prompt: { prompt: string }) => Promise<string | null>,
  storedAnalysis: string = ''
): Promise<LetterAnalysis> => {
  const paragraphs = content.split(/\n\n+/).filter(p => p.trim());

  const prompt = `Tu es un expert en analyse de contenu et en communication professionnelle.

Analyse cette lettre de motivation et fournis une √©valuation d√©taill√©e :

CONTENU :
${content}

INSTRUCTIONS :
1. Analyse le ton g√©n√©ral (formel, informel, professionnel, passionn√©, etc.)
2. √âvalue l'√©quilibre entre les paragraphes
3. V√©rifie la coh√©rence et la fluidit√©
4. Identifie les points forts et les points √† am√©liorer
5. Donne une note globale sur 10
6. Fournis des conseils concrets pour am√©liorer la lettre

R√©ponds en formatant clairement avec des √©mojis pour chaque section.

IMPORTANT : Sois constructif et encourageur, m√™me en signalant des points d'am√©lioration.${storedAnalysis ? `
- Analyse pr√©c√©dente du document :
${storedAnalysis}` : ''}`;

  try {
    const analysis = await editCVField({ prompt });

    if (analysis) {
      return {
        message: `${analysis}`,
        type: 'success'
      };
    } else {
      throw new Error('Pas de r√©ponse de l\'IA');
    }
  } catch {
    // Analyse locale en fallback
    const localAnalysis = performLocalToneAnalysis(content, paragraphs);
    return {
      message: `üìä **Analyse de votre lettre**\n\n${localAnalysis}`,
      type: 'info'
    };
  }
};

// G√©n√©ration simple de contenu HTML avec IA
export const generateLetterContent = async (
  formData: {
    poste: string;
    entreprise: string;
    secteur: string;
    experience: string;
    motivation: string;
    competences: string;
  },
  editCVField: (prompt: { prompt: string }) => Promise<string | null>,
  profileInfo?: {
    fullName?: string;
    email?: string;
    phone?: string;
    address?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    profession?: string;
  }
): Promise<string> => {
  // G√©n√©rer des informations par d√©faut si les champs sont vides
  const defaultExperience = formData.experience.trim() || `Professionnel exp√©riment√© avec de solides comp√©tences dans le domaine du ${formData.secteur || 'num√©rique'}. Capable de m'adapter rapidement aux nouveaux d√©fis et technologies.`;
  const defaultMotivation = formData.motivation.trim() || `Recherche activement √† mettre mes comp√©tences au service d'une entreprise innovante. D√©sireux de contribuer au succ√®s de projets ambitieux et de d√©velopper de nouvelles comp√©tences dans un environnement stimulant.`;
  const defaultCompetences = formData.competences.trim() || `Comp√©tences professionnelles, autonomie, rigueur, excellent esprit d'√©quipe, capacit√© d'adaptation, r√©solution de probl√®mes, communication efficace.`;
  const defaultSecteur = formData.secteur.trim() || `secteur du num√©rique et de la communication`;

  // Utiliser les informations du profil si disponibles
  const candidateName = profileInfo?.fullName || (formData.poste ? 'Candidat pour poste de ' + formData.poste : 'Professionnel qualifi√©');
  const candidateProfession = profileInfo?.profession || formData.poste || 'Professionnel';
  const candidateContact = profileInfo ? [
    profileInfo.email && `Email: ${profileInfo.email}`,
    profileInfo.phone && `T√©l√©phone: ${profileInfo.phone}`,
    profileInfo.address && `Adresse: ${profileInfo.address}`,
    profileInfo.city && profileInfo.postalCode && `Ville: ${profileInfo.city} ${profileInfo.postalCode}`,
    profileInfo.country && `Pays: ${profileInfo.country}`
  ].filter(Boolean).join('\n') : '';

  // Informations de l'entreprise si disponibles
  const companyInfo = formData.entreprise ? `
- Nom de l'entreprise : ${formData.entreprise}
${formData.secteur ? `- Secteur d'activit√© : ${formData.secteur}` : ''}` : '';

  // Cr√©er les coordonn√©es compl√®tes du candidat
  const candidateFullContact = candidateContact ?
    candidateContact.replace(/Email: /g, '').replace(/T√©l√©phone: /g, '').replace(/Adresse: /g, '').replace(/Ville: /g, '').replace(/Pays: /g, '').split('\n').filter(line => line.trim()).join('<br>') :
    `${candidateName}<br>${candidateProfession}<br>Email: [email@example.com]<br>T√©l√©phone: [num√©ro]<br>[Ville], [Code Postal]`;

  const prompt = `Cr√©ez une lettre de motivation professionnelle en HTML avec ces √©l√©ments :

Coordonn√©es du candidat :
- Nom complet : ${candidateName}
- Profession : ${candidateProfession}
${candidateContact ? `- Informations de contact :\n${candidateContact}` : ''}

${companyInfo ? `INFORMATIONS DE L'ENTREPRISE :${companyInfo}` : '- Entreprise cible : Non sp√©cifi√©e'}
- Secteur d'activit√© : ${defaultSecteur}
- Exp√©rience professionnelle : ${defaultExperience}
- Motivation : ${defaultMotivation}
- Comp√©tences cl√©s : ${defaultCompetences}

Structure requise :
1. **TR√àS IMPORTANT : En-t√™te en HAUT de la lettre avec coordonn√©es compl√®tes**

   <div style="display: flex; justify-content: space-between; margin-bottom: 30px;">
     <!-- Coordonn√©es du candidat (gauche) -->
     <div style="text-align: left; line-height: 1.4;">
       <strong>${candidateName}</strong><br>
       ${candidateProfession}<br>
       ${candidateFullContact}
     </div>

     <!-- Coordonn√©es de l'entreprise (droite) -->
     <div style="text-align: right; line-height: 1.4;">
       <strong>${formData.entreprise || '[NOM DE L\'ENTREPRISE]'}</strong><br>
       ${formData.secteur ? `${formData.secteur}<br>` : ''}
       Service des Ressources Humaines<br>
       [Adresse de l'entreprise]<br>
       [Ville], [Code Postal]
     </div>
   </div>

2. **Saut de ligne**
3. Date et objet
4. Formule d'appel
5. Corps de lettre (3 paragraphes)
6. Formule de politesse
7. **Signature SEULEMENT avec le nom** : ${candidateName}

Format HTML : utilisez <p> pour les paragraphes, <strong> pour emphasis, <br><br> pour sauts de ligne.

‚ö†Ô∏è CRUCIAL : L'en-t√™te avec les coordonn√©es doit √™tre la PREMI√àRE chose visible, bien structur√©e avec le candidat √† gauche et l'entreprise √† droite. Les coordonn√©es n'appara√Ætront nulle part ailleurs.

G√©n√©rez uniquement le code HTML complet.`;

  try {
    console.log('üöÄ Envoi du prompt √† l\'IA pour g√©n√©ration de lettre...');
    console.log('üìù Longueur du prompt:', prompt.length, 'caract√®res');

    const generatedContent = await editCVField({ prompt });

    console.log('üì• R√©ponse re√ßue de l\'IA:', generatedContent ? 'Succ√®s' : '√âchec');
    console.log('üìè Longueur de la r√©ponse:', generatedContent?.length || 0, 'caract√®res');

    if (generatedContent) {
      console.log('üîç D√©but de la r√©ponse:', generatedContent.substring(0, 200) + '...');
    }

    if (!generatedContent) {
      throw new Error('Pas de r√©ponse de l\'IA');
    }

    let cleanedContent = generatedContent.trim();

    // Nettoyer les guillemets
    if (cleanedContent.startsWith('"') && cleanedContent.endsWith('"')) {
      cleanedContent = cleanedContent.slice(1, -1);
    }

    // Si pas de HTML, convertir en HTML simple
    if (!cleanedContent.includes('<')) {
      cleanedContent = cleanedContent
        .split(/\n\n+/)
        .map(p => `<p>${p.trim()}</p>`)
        .join('<br><br>');
    }

    return cleanedContent;
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration:', error);
    throw error;
  }
};


// Am√©lioration de texte avec IA
export const improveTextWithAI = async (
  selectedText: string,
  documentAnalysis: DocumentAnalysis,
  storedAnalysis: string,
  editCVField: (prompt: { prompt: string }) => Promise<string | null>,
  profileInfo?: {
    fullName?: string;
    email?: string;
    phone?: string;
    address?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    profession?: string;
  }
): Promise<string> => {
  // Cr√©er le prompt pour l'IA avec contexte
  // Utiliser les informations du profil si disponibles
  const candidateInfo = profileInfo ? `
- Nom du candidat : ${profileInfo.fullName || 'Non sp√©cifi√©'}
- Profession : ${profileInfo.profession || 'Non sp√©cifi√©e'}
- Email : ${profileInfo.email || 'Non sp√©cifi√©'}
- T√©l√©phone : ${profileInfo.phone || 'Non sp√©cifi√©'}
${profileInfo.address ? `- Adresse : ${profileInfo.address}` : ''}
${profileInfo.city && profileInfo.postalCode ? `- Ville : ${profileInfo.city} ${profileInfo.postalCode}` : ''}
${profileInfo.country ? `- Pays : ${profileInfo.country}` : ''}` : '';

  const contextPrompt = `Tu es un expert en r√©daction professionnelle et am√©lioration de textes. R√©dige comme un humain passionn√© et authentique, pas comme une IA robotique.

CONTEXTE DU DOCUMENT :
- Type de document : Lettre de motivation professionnelle${candidateInfo ? `
INFORMATIONS DU CANDIDAT :${candidateInfo}` : ''}
- Ton d√©tect√© : ${documentAnalysis.tone === 'formal' ? 'Formel' : documentAnalysis.tone === 'informal' ? 'Informel' : 'Professionnel'}${storedAnalysis ? `
- Analyse pr√©c√©dente du document :
${storedAnalysis}` : ''}
- Langue : ${documentAnalysis.language === 'french' ? 'Fran√ßais' : 'Anglais'}
- Structure : ${documentAnalysis.structure.paragraphCount} paragraphes
- Contient formule de politesse : ${documentAnalysis.hasFormulePolitesse ? 'Oui' : 'Non'}
- Mots-cl√©s existants : ${documentAnalysis.existingKeywords.join(', ')}

TEXTE √Ä AM√âLIORER :
"${selectedText}"

INSTRUCTIONS SP√âCIFIQUES :
1. √âcris comme un humain passionn√© par le m√©tier, pas comme une IA
2. Utilise des phrases fluides et naturelles avec une longueur vari√©e
3. Int√®gre des mots de liaison naturels (en effet, de plus, ainsi, cependant)
4. Sois professionnel mais accessible, √©vite le jargon excessif
5. Ajoute de l'authenticit√© avec des expressions naturelles et spontan√©es
6. Structure les paragraphes de mani√®re logique et agr√©able √† lire
7. V√©rifie la grammaire et l'orthographe de mani√®re subtile
8. Conserve le sens original mais am√©liore l'impact et la clart√©
9. √âvite les formules clich√©es et les expressions trop g√©n√©riques
10. R√©ponds UNIQUEMENT avec le texte am√©lior√©, sans guillemets ni explications

STYLE VIS√â : Naturel, authentique, professionnel mais humain, comme un candidat passionn√© qui √©crit sinc√®rement.

IMPORTANT : R√©ponds seulement avec le texte am√©lior√©, rien d'autre.`;

  try {
    // Appel r√©el √† l'API OpenAI
    const improvedText = await editCVField({ prompt: contextPrompt });

    if (improvedText) {
      // Post-traitement pour nettoyer le texte
      let cleanedText = improvedText.trim();

      // Supprimer les guillemets en d√©but et fin de texte
      if (cleanedText.startsWith('"')) {
        cleanedText = cleanedText.substring(1);
      }
      if (cleanedText.endsWith('"')) {
        cleanedText = cleanedText.slice(0, -1);
      }

      // Supprimer les guillemets doubles en d√©but et fin
      if (cleanedText.startsWith('¬´')) {
        cleanedText = cleanedText.substring(1);
      }
      if (cleanedText.endsWith('¬ª')) {
        cleanedText = cleanedText.slice(0, -1);
      }

      return cleanedText.trim();
    } else {
      throw new Error('Pas de r√©ponse de l\'IA');
    }
  } catch (error) {
    console.error('Erreur lors de l\'appel IA:', error);
    throw error;
  }
};

// Analyse locale du ton et de l'√©quilibre
const performLocalToneAnalysis = (content: string, paragraphs: string[]): string => {
  const wordCount = content.split(/\s+/).length;
  const avgParagraphLength = paragraphs.length > 0 ? wordCount / paragraphs.length : 0;

  // D√©tection du ton
  const formalWords = /(madame|monsieur|je vous prie|veuillez|sinc√®rement|respectueusement|cordialement)/gi;
  const passionateWords = /(passionn√©|enthousiaste|motiv√©|d√©sireux|eager|excited)/gi;
  const informalWords = /(salut|copain|super|g√©nial|cool)/gi;

  const formalCount = (content.match(formalWords) || []).length;
  const passionateCount = (content.match(passionateWords) || []).length;
  const informalCount = (content.match(informalWords) || []).length;

  let tone = 'Professionnel';
  if (formalCount > passionateCount && formalCount > informalCount) {
    tone = 'Formel';
  } else if (passionateCount > formalCount && passionateCount > informalCount) {
    tone = 'Passionn√©';
  } else if (informalCount > 0) {
    tone = 'Informel';
  }

  // Analyse de l'√©quilibre
  let balanceAnalysis = '√âquilibr√©';
  if (paragraphs.length < 3) {
    balanceAnalysis = 'Trop court (manque de d√©veloppement)';
  } else if (paragraphs.length > 8) {
    balanceAnalysis = 'Trop long (risque de perdre l\'attention)';
  } else if (avgParagraphLength < 20) {
    balanceAnalysis = 'Paragraphes trop courts';
  } else if (avgParagraphLength > 150) {
    balanceAnalysis = 'Paragraphes trop longs';
  }

  let score = 7;
  if (tone === 'Professionnel') score += 1;
  if (balanceAnalysis === '√âquilibr√©') score += 1;
  if (wordCount >= 150 && wordCount <= 400) score += 1;
  score = Math.min(10, Math.max(1, score));

  return `**Ton d√©tect√© :** ${tone}
**√âquilibre :** ${balanceAnalysis}
**Longueur :** ${wordCount} mots, ${paragraphs.length} paragraphes
**Note :** ${score}/10

${score >= 8 ? '‚úÖ **Excellente lettre !**' : score >= 6 ? 'üëç **Bonne lettre, quelques am√©liorations possibles**' : 'üìù **Lettre √† am√©liorer**'}

${balanceAnalysis.includes('Trop') ? 'üí° *Conseil : Ajustez la longueur pour un meilleur impact.*' : ''}
${tone === 'Informel' ? 'üí° *Conseil : Rendez le ton plus professionnel.*' : ''}`;
};

// G√©n√©ration/r√©g√©n√©ration de lettre √† partir du contenu existant
export const regenerateLetterFromContent = async (
  existingContent: string,
  formData: {
    poste: string;
    entreprise: string;
    secteur: string;
    experience: string;
    motivation: string;
    competences: string;
  } | null,
  editCVField: (prompt: { prompt: string }) => Promise<string | null>,
  profileInfo?: {
    fullName?: string;
    email?: string;
    phone?: string;
    address?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    profession?: string;
  }
): Promise<string> => {
  let prompt = `Tu es un expert en r√©daction de lettres de motivation professionnelles et persuasives.`;

  // Utiliser les informations du profil si disponibles (d√©finies ici pour tous les cas)
  const candidateName = profileInfo?.fullName || 'Candidat';
  const candidateContact = profileInfo ? [
    profileInfo.email && `Email: ${profileInfo.email}`,
    profileInfo.phone && `T√©l√©phone: ${profileInfo.phone}`,
    profileInfo.address && `Adresse: ${profileInfo.address}`,
    profileInfo.city && profileInfo.postalCode && `Ville: ${profileInfo.city} ${profileInfo.postalCode}`
  ].filter(Boolean).join('\n') : '';

  // D√©clarer candidateProfession avec une valeur par d√©faut pour qu'elle soit accessible dans toute la fonction
  let candidateProfession = profileInfo?.profession || 'Professionnel';

  if (formData && formData.poste.trim() && formData.entreprise.trim()) {
    // Utiliser les donn√©es du formulaire si disponibles
    candidateProfession = profileInfo?.profession || formData.poste;

    prompt += `

DONN√âES DISPONIBLES :
- Nom du candidat : ${candidateName}
- Profession : ${candidateProfession}
${candidateContact ? `- Coordonn√©es :\n${candidateContact}` : ''}
- Poste vis√© : ${formData.poste}
- Entreprise : ${formData.entreprise}
- Secteur d'activit√© : ${formData.secteur}
- Exp√©rience : ${formData.experience}
- Motivation : ${formData.motivation}
- Comp√©tences : ${formData.competences}`;

    if (existingContent.trim()) {
      prompt += `

CONTENU EXISTANT √Ä AM√âLIORER/R√â√âCRIRE :
${existingContent}

R√â√âCRIS compl√®tement cette lettre en utilisant les donn√©es ci-dessus pour l'enrichir, mais garde l'essence et am√©liore la qualit√©.`;
    } else {
      prompt += `

G√âN√àRE une nouvelle lettre compl√®te avec ces donn√©es.`;
    }
  } else if (existingContent.trim()) {
    // Pas de formData, mais contenu existant - analyser et am√©liorer
    const analysis = analyzeStructure(existingContent);
    const tone = detectTone(existingContent);
    const keywords = extractKeywords(existingContent);

    prompt += `

CONTENU EXISTANT √Ä ANALYSER ET AM√âLIORER :
${existingContent}

ANALYSE DU CONTENU :
- Ton d√©tect√© : ${tone === 'formal' ? 'Formel' : tone === 'informal' ? 'Informel' : 'Professionnel'}
- Structure : ${analysis.paragraphCount} paragraphes
- Mots-cl√©s : ${keywords.join(', ')}

R√â√âCRIS compl√®tement cette lettre en analysant automatiquement les informations (poste, entreprise, secteur) depuis le contenu existant. Si certaines informations sont manquantes, utilise des donn√©es g√©n√©riques appropri√©es pour ce secteur.`;
  } else {
    // Ni formData ni contenu - g√©n√©ration basique
    prompt += `

G√âN√àRE une lettre de motivation compl√®te et professionnelle avec des informations g√©n√©riques. L'utilisateur n'a pas fourni de donn√©es sp√©cifiques, donc utilise des exemples appropri√©s.`;
  }

  // Cr√©er les coordonn√©es compl√®tes du candidat
  const candidateFullContact = candidateContact ?
    candidateContact.replace(/Email: /g, '').replace(/T√©l√©phone: /g, '').replace(/Adresse: /g, '').replace(/Ville: /g, '').replace(/Pays: /g, '').split('\n').filter(line => line.trim()).join('<br>') :
    `${candidateName}<br>${candidateProfession}<br>Email: [email@example.com]<br>T√©l√©phone: [num√©ro]<br>[Ville], [Code Postal]`;

  prompt += `

STRUCTURE DE LA LETTRE :
1. **TR√àS IMPORTANT : En-t√™te en HAUT de la lettre avec coordonn√©es compl√®tes**

   <div style="display: flex; justify-content: space-between; margin-bottom: 30px;">
     <!-- Coordonn√©es du candidat (gauche) -->
     <div style="text-align: left; line-height: 1.4;">
       <strong>${candidateName}</strong><br>
       ${candidateProfession}<br>
       ${candidateFullContact}
     </div>

     <!-- Coordonn√©es de l'entreprise (droite) -->
     <div style="text-align: right; line-height: 1.4;">
       <strong>${formData && formData.entreprise ? formData.entreprise : '[NOM DE L\'ENTREPRISE]'}</strong><br>
       ${formData && formData.secteur ? `${formData.secteur}<br>` : ''}
       Service des Ressources Humaines<br>
       [Adresse de l'entreprise]<br>
       [Ville], [Code Postal]
     </div>
   </div>

2. **Saut de ligne**
3. Date et objet
4. Formule d'appel
5. Corps de la lettre (3-4 paragraphes)
6. Formule de politesse
7. **Signature SEULEMENT avec le nom** : ${candidateName}

‚ö†Ô∏è CRUCIAL : L'en-t√™te avec les coordonn√©es doit √™tre la PREMI√àRE chose visible, bien structur√©e avec le candidat √† gauche et l'entreprise √† droite. Les coordonn√©es n'appara√Ætront nulle part ailleurs.

STYLE RECHERCH√â :
- Professionnel et moderne
- Authentique et passionn√©
- Claire et structur√©e
- Persuasif sans √™tre agressif
- Adapt√© au secteur d√©tect√©/automatique

CONSIGNES IMPORTANTES :
1. Utilise un langage professionnel mais accessible
2. Mettre en valeur l'exp√©rience pertinente pour ce poste
3. Montrer la connaissance de l'entreprise
4. Inclure des mots-cl√©s pertinents pour les ATS
5. Garder un ton enthousiaste mais professionnel
6. √âviter les formules clich√©es et trop g√©n√©riques
7. Respecter les conventions des lettres de motivation fran√ßaises

FORMAT : Renvoie UNIQUEMENT le contenu HTML de la lettre compl√®te, sans aucun commentaire ni explication. Structure avec des paragraphes <p> et sauts de ligne appropri√©s.

IMPORTANT : Utilise le formatage HTML suivant :
- <p> pour les paragraphes
- <br> pour les sauts de ligne
- <strong> pour le texte important
- <em> pour l'emphase l√©g√®re
- <div> avec style="text-align: right;" pour les √©l√©ments align√©s √† droite
- <br><br> pour les sauts de paragraphes`;

  try {
    const generatedContent = await editCVField({ prompt });

    if (generatedContent) {
      // Nettoyer le contenu g√©n√©r√©
      let cleanedContent = generatedContent.trim();

      // V√©rifier si c'est du JSON (parfois l'IA retourne du JSON mal form√©)
      try {
        const parsed = JSON.parse(cleanedContent);
        if (typeof parsed === 'object' && parsed.response) {
          cleanedContent = parsed.response;
        } else if (typeof parsed === 'object' && parsed.content) {
          cleanedContent = parsed.content;
        } else if (typeof parsed === 'string') {
          cleanedContent = parsed;
        }
      } catch {
        // Ce n'est pas du JSON, continuer normalement
      }

      // Supprimer les guillemets s'ils existent
      if (cleanedContent.startsWith('"') && cleanedContent.endsWith('"')) {
        cleanedContent = cleanedContent.slice(1, -1);
      }

      // Si le contenu ne contient pas de balises HTML, le formater
      if (!cleanedContent.includes('<p>') && !cleanedContent.includes('<br>')) {
        // Convertir les paragraphes (double saut de ligne) en <p>
        cleanedContent = cleanedContent.split(/\n\n+/).map(paragraph =>
          `<p>${paragraph.trim()}</p>`
        ).join('\n');

        // Convertir les sauts de ligne simples en <br>
        cleanedContent = cleanedContent.replace(/\n/g, '<br>');
      } else {
        // S'il y a d√©j√† du HTML, juste convertir les sauts de ligne restants
        cleanedContent = cleanedContent.replace(/\n/g, '<br>');
      }

      return cleanedContent;
    } else {
      throw new Error('Pas de r√©ponse de l\'IA');
    }
  } catch (error) {
    console.error('Erreur lors de la r√©g√©n√©ration du contenu:', error);
    throw error;
  }
};

// Fonctions d'analyse contextuelle
export const detectTone = (text: string): 'formal' | 'informal' | 'professional' => {
  if (/(madame|monsieur|je vous prie|veuillez|sinc√®rement)/i.test(text)) return 'formal';
  if (/(salut|copain|super|g√©nial)/i.test(text)) return 'informal';
  return 'professional';
};

export const detectLanguage = (text: string): 'french' | 'english' => {
  return /(le|la|les|de|du|des|et|est|dans|pour|avec|que|qui|ce|se|ne|me|te|lui|leur)/i.test(text) ? 'french' : 'english';
};

export const analyzeStructure = (text: string) => {
  const paragraphs = text.split('\n\n').filter(p => p.trim());
  return {
    paragraphCount: paragraphs.length,
    hasIntroduction: paragraphs.length > 0 && paragraphs[0].length < 200,
    hasConclusion: paragraphs.length > 0 && /(cordialement|sinc√®rement|bien √† vous)/i.test(paragraphs[paragraphs.length - 1])
  };
};

export const extractKeywords = (text: string): string[] => {
  const words = text.toLowerCase().match(/\b\w{4,}\b/g) || [];
  return [...new Set(words)].slice(0, 10);
};
